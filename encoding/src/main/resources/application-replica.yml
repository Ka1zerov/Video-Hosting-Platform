# Production configuration with database replication

server:
  port: 8085

spring:
  application:
    name: encoding-service
  
  # Write operations - HAProxy routes to Master
  datasource:
    url: jdbc:postgresql://localhost:5435/video_platform
    username: ${DB_USERNAME:upload_user}
    password: ${DB_PASSWORD:upload_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      validation-timeout: 5000

  # Read-only operations - HAProxy routes to Master + Slave
  datasource-readonly:
    url: jdbc:postgresql://localhost:5436/video_platform
    username: ${DB_USERNAME:upload_user}
    password: ${DB_PASSWORD:upload_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 15
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      validation-timeout: 5000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false  # Disable in production
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false  # Disable in production
  
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/db.changelog-master.yaml
  
  # Redis configuration for production
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 5000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
  
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    virtual-host: ${RABBITMQ_VHOST:/}

# AWS S3 Configuration
aws:
  access:
    key: ${AWS_ACCESS_KEY}
  secret:
    key: ${AWS_SECRET_KEY}
  region: ${AWS_REGION:eu-north-1}
  s3:
    bucket:
      name: ${S3_BUCKET_NAME:video-hosting-thesis}

# RabbitMQ Configuration
rabbitmq:
  exchange:
    video: ${RABBITMQ_EXCHANGE:video.exchange}
  queue:
    encoding: ${RABBITMQ_QUEUE_ENCODING:video.encoding.queue}
  routing:
    key:
      encoding: ${RABBITMQ_ROUTING_KEY_ENCODING:video.encoding}

# FFmpeg Configuration
ffmpeg:
  path: ${FFMPEG_PATH:/usr/bin/ffmpeg}

ffprobe:
  path: ${FFPROBE_PATH:/usr/bin/ffprobe}

# Encoding Configuration
encoding:
  temp:
    directory: ${ENCODING_TEMP_DIR:/tmp/encoding}
  hls:
    segment:
      duration: ${HLS_SEGMENT_DURATION:10}
  concurrent:
    jobs: ${ENCODING_CONCURRENT_JOBS:2}  # Limit concurrent encoding jobs

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: never  # Hide details in production

# Logging configuration for production
logging:
  level:
    com.tskrypko.encoding: INFO
    org.springframework.web: WARN
    org.hibernate.SQL: WARN  # Hide SQL in production
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/encoding-service.log
    max-size: 100MB
    max-history: 30 