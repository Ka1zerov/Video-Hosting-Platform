# Production configuration with database replication

server:
  port: 8084

spring:
  application:
    name: streaming-service
  
  # Write operations - HAProxy routes to Master
  datasource:
    url: jdbc:postgresql://localhost:5435/video_platform
    username: ${DB_USERNAME:upload_user}
    password: ${DB_PASSWORD:upload_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      validation-timeout: 5000

  # Read-only operations - HAProxy routes to Master + Slave
  datasource-readonly:
    url: jdbc:postgresql://localhost:5436/video_platform
    username: ${DB_USERNAME:upload_user}
    password: ${DB_PASSWORD:upload_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 15
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      validation-timeout: 5000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false  # Disable in production
    open-in-view: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false  # Disable in production
  
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.yaml
    enabled: true
    contexts: streaming-service
  
  # Redis configuration for production
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 5000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
  
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    virtual-host: ${RABBITMQ_VHOST:/}

# AWS Configuration
aws:
  access:
    key: ${AWS_ACCESS_KEY}
  secret:
    key: ${AWS_SECRET_KEY}
  region: ${AWS_REGION:us-east-1}
  s3:
    bucket:
      name: ${S3_BUCKET_NAME}
      prefix: ${S3_BUCKET_PREFIX:videos/}
  cloudfront:
    domain: ${CLOUDFRONT_DOMAIN:}
    enabled: ${CLOUDFRONT_ENABLED:true}

# Streaming Configuration
streaming:
  # Supported video formats and qualities
  formats:
    hls:
      enabled: true
      segment-duration: 10
      playlist-window-size: 5
    dash:
      enabled: true
      segment-duration: 10
    mp4:
      enabled: true
  
  # Video quality settings
  qualities:
    - name: "480p"
      width: 854
      height: 480
      bitrate: 1000
    - name: "720p"
      width: 1280
      height: 720
      bitrate: 2500
    - name: "1080p"
      width: 1920
      height: 1080
      bitrate: 5000
  
  # CDN Configuration
  cdn:
    enabled: ${CDN_ENABLED:true}
    cache-control: "public, max-age=31536000"
    manifest-cache-control: "public, max-age=60"
  
  # Security settings
  security:
    rate-limit:
      requests-per-minute: 120
      requests-per-hour: 3000

# RabbitMQ Configuration
rabbitmq:
  exchange:
    video: ${RABBITMQ_EXCHANGE:video.exchange}
  queue:
    streaming: ${RABBITMQ_QUEUE_STREAMING:video.streaming.queue}
  routing:
    key:
      streaming: ${RABBITMQ_ROUTING_KEY_STREAMING:video.streaming}

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: never  # Hide details in production

# Logging configuration for production
logging:
  level:
    com.tskrypko.streaming: INFO
    org.springframework.web: WARN
    org.hibernate.SQL: WARN  # Hide SQL in production
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/streaming-service.log
    max-size: 100MB
    max-history: 30

# Custom application properties
app:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:https://yourdomain.com}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
    allowed-headers: ${CORS_ALLOWED_HEADERS:*} 